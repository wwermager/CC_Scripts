local front = peripheral.wrap("front")
local left = peripheral.wrap("left")
local left_name = peripheral.getName(left)
local right = peripheral.wrap("right")
local right_name = peripheral.getName(right)
local up = peripheral.wrap("top")
local down = peripheral.wrap("bottom")
local down_name = peripheral.getName(down)
local barrels_opened = 0

local PUZZLE_NAME = "Test of Patience"
local BARREL_DISPLAY_NAME = "Barrel"
local PAPER = "minecraft:paper"
local PUFFER_FISH = "minecraft:pufferfish"
local APPLE = "minecraft:apple"
local COOKIE = "minecraft:cookie"
local BARREL = "minecraft:barrel"
local PROCESS_START = os.clock()

turtle.select(1)

local function benchmark(start_time)
    return os.clock() - start_time
end
local function place_new()

    assert(turtle.place(), "Unable to place new barrel.")

    if turtle.getItemSpace(2) == 0 then
        turtle.select(2)
        assert(turtle.dropUp(),"Unable to clear turtle inventory.")
        turtle.select(1)
    -- clean up original "Test of Patience Barrel", can't dropUp because of unique displayName and nbt data prevents stacking
    -- we can have main processing loop move this to our miscellaneous chest on the right
    elseif turtle.getItemDetail(2, true).displayName == PUZZLE_NAME then
        turtle.select(2)
        assert(turtle.drop(),"Unable to put \"Test of Patience\" barrel in new barrel.")
        turtle.select(1)
    end
end



-- Last exit before breaking barrel but after pulling mystery barrel
if peripheral.isPresent("front") and turtle.getItemDetail(1) then

    print("Resuming operation: barrel already processed, deploying a new one.")
    assert(turtle.dig(), "Unable to break barrel in front.")
    place_new()

-- Last exited after breaking barrel but before placing the new one
elseif not peripheral.isPresent("front") and turtle.getItemDetail(1) then
    
    print("Resuming operation: deploying a new barrel.")
    place_new()

else
    print("Resuming operation: existing barrel has inventory to be processed.")
end

assert(left and right and up and down, "At least one storage item (i.e. chest, drawer, barrel, etc.) must be placed directly to the left, right, back, top or bottom of the turtle.")



while true do

    local start_time = os.clock()
    -- turtle was occasionally failing making the call to .list(), adding small delay fixed this
    sleep(.05)
    local barrel_items = front.list()
    local total_item_count = 0
    local withdrawn_count = 0
    
    for slot, item_info in pairs(barrel_items) do

        local item_name = item_info.name
        total_item_count = total_item_count + item_info.count

        if item_name == PAPER then
            withdrawn_count = withdrawn_count + front.pushItems(peripheral.getName(down),slot)

        elseif (item_name == APPLE or item_name == COOKIE or item_name == PUFFER_FISH) then
            withdrawn_count = withdrawn_count + front.pushItems(peripheral.getName(left),slot)

        -- found something other than the next barrel to open
        elseif not (front.getItemDetail(slot,true).displayName == BARREL_DISPLAY_NAME) then
            withdrawn_count = withdrawn_count + front.pushItems(peripheral.getName(right),slot)
        end

    end
    -- A nested barrel wasn't found, so fail
    if not turtle.suck() then
        print(string.format("total elapsed time: %.2fs\tbarrels opened: %d\n", benchmark(PROCESS_START), barrels_opened)) 
        error("No new barrel. Perhaps the end was reached?")
    end

    withdrawn_count = withdrawn_count + 1
    assert(total_item_count == withdrawn_count, "Unable to deposit items into attached storage.")
    barrels_opened = barrels_opened + 1
    assert(turtle.dig(), "Unable to break barrel in front.")
    place_new()

    if math.fmod(barrels_opened,10) == 0 then
        local elapsed_time = benchmark(PROCESS_START)
        print(string.format("elapsed time: %.2fs\tbarrels opened: %d\tbarrels/sec: %.2fbps\n",
         elapsed_time, barrels_opened, barrels_opened/elapsed_time))
    end
end